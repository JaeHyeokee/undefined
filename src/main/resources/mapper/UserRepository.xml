<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.UserRepository">

    <sql id="SELECT_BASE">
        SELECT
            user_id "userId"
             , user_password "password"
             , user_name "username"
             , user_email "email"
             , user_regdate "regdate"
             , user_nickname "nickname"
             , user_phonenum "phonenum"
             , provider "provider"
             , providerId "providerId"
        FROM user
        WHERE 1 = 1
    </sql>

    <select id="findById" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND user_id = #{userId}
    </select>

    <select id="findByNickname" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND user_nickname = #{nickname}
    </select>

    <select id="findByEmail" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND user_email = #{email}
    </select>

    <select id="findByPhonenum" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND user_phonenum = #{phonenum}
    </select>

    <select id="findByProvider" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND provider = #{provider}
    </select>

    <select id="findByProviderId" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND providerId = #{providerId}
    </select>

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.User"
            useGeneratedKeys="true" keyColumn="id" keyProperty="userId">
        INSERT INTO user(user_password, user_name, user_email, user_nickname, user_phonenum, provider, providerId)
            VALUE(#{password}, #{username}, #{email}, #{nickname}, #{phonenum}, #{provider}, #{providerId})
    </insert>

    <update id="update" flushCache="true" parameterType="com.lec.spring.domain.User">
        UPDATE user SET user_email = #{email}, user_password = #{password}, user_nickname = #{nickname}, user_phonenum = #{phonenum}
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteUser" flushCache="true" parameterType="com.lec.spring.domain.User">
        DELETE FROM user
        WHERE user_id = #{userId}
    </delete>

    <delete id="deleteLodging" flushCache="true">
        DELETE FROM lodging WHERE user_id = #{userId}
    </delete>

    <delete id="deleteUserAuthority" flushCache="true">
        DELETE FROM user_authority WHERE user_id = #{userId}
    </delete>

    <delete id="deletePosts" flushCache="true">
        DELETE FROM post WHERE user_id = #{userId}
    </delete>

    <delete id="deleteComments" flushCache="true">
        DELETE FROM comment WHERE user_id = #{userId}
    </delete>

    <delete id="deleteReservations" parameterType="long">
        DELETE FROM reservation WHERE user_id = #{userId}
    </delete>

    <delete id="deleteBookings" flushCache="true">
        DELETE FROM booking WHERE user_id = #{userId}
    </delete>

    <delete id="deleteLoves" flushCache="true">
        DELETE FROM love WHERE user_id = #{userId}
    </delete>

    <delete id="deleteRooms" parameterType="long">
        DELETE room FROM room
                             JOIN lodging ON room.lodging_id = lodging.lodging_id
        WHERE lodging.user_id = #{userId}
    </delete>

    <delete id="deletePostsByBookingId" parameterType="long">
        DELETE FROM post WHERE booking_id IN (SELECT booking_id FROM booking WHERE user_id = #{userId})
    </delete>

    <delete id="deleteBookingByRoomId" parameterType="long">
        DELETE FROM booking WHERE room_id IN (SELECT room_id FROM room WHERE user_id = #{userId})
    </delete>

    <delete id="deleteRoomByLodgingId" parameterType="long">
        DELETE FROM room WHERE lodging_id IN (SELECT room.lodging_id FROM lodging WHERE user_id = #{userId})
    </delete>

    <delete id="deleteReservationsByUserId" parameterType="long">
        DELETE FROM reservation WHERE user_id = #{userId}
    </delete>

</mapper>
